/* Parser skeleton for processing item-???.xml files. Must be compiled in * JDK 1.5 or above. * * Instructions: * * This program processes all files passed on the command line (to parse * an entire diectory, type "java MyParser myFiles/*.xml" at the shell). * */import java.io.*;import java.text.*;import java.util.*;import org.xml.sax.XMLReader;import org.xml.sax.Attributes;import org.xml.sax.InputSource;import org.xml.sax.helpers.XMLReaderFactory;import org.xml.sax.helpers.DefaultHandler;public class MySAX_Mod extends DefaultHandler{	private String value="";	//	private int itemID=-1;	private double selRating=-1.0;	private String sellerID = "";	private double latitude = -1.0;	private double longitude=-1.0;	private double sbidRating=-1.0;	private String bidID = "";	private  static final String DEL="Â¬";	private boolean category;    public static void main (String args[])	throws Exception    {	XMLReader xr = XMLReaderFactory.createXMLReader();	MySAX_Mod handler = new MySAX_Mod();	xr.setContentHandler(handler);	xr.setErrorHandler(handler);				// Parse each file provided on the				// command line.	for (int i = 0; i < args.length; i++) {	    FileReader r = new FileReader(args[i]);	    xr.parse(new InputSource(r));	}    }    public MySAX_Mod()    {	super();    }    /* Returns the amount (in XXXXX.xx format) denoted by a money-string     * like $3,453.23. Returns the input if the input is an empty string.     */    static String strip(String money) {        if (money.equals(""))            return money;        else {            double am = 0.0;            NumberFormat nf = NumberFormat.getCurrencyInstance(Locale.US);            try { am = nf.parse(money).doubleValue(); }            catch (ParseException e) {                System.out.println("This method should work for all " +                                   "money values you find in our data.");                System.exit(20);            }            nf.setGroupingUsed(false);            return nf.format(am).substring(1);        }    }    ////////////////////////////////////////////////////////////////////    // Event handlers.    ////////////////////////////////////////////////////////////////////    public void startDocument ()    {	System.out.println("Start document");    }    public void endDocument ()    {	System.out.println("End document");    }    public void startElement (String uri, String name,			      String qName, Attributes atts)    {		if ("".equals (uri))	    System.out.println("Start element: " + qName);	else	    System.out.println("Start element: {" + uri + "}" + name);	for (int i = 0; i < atts.getLength(); i++) {	    System.out.println("Attribute: " + atts.getLocalName(i) + "=" + atts.getValue(i));	}		switch(name)		{			case "Item":				this.itemID = Integer.parseInt(atts.getValue(0));			break;			case "Location":				//We do not know for sure if there are both fields or				//non of them. So, we should check this case.				if (atts.getLength() == 2)				{					this.latitude = Double.parseDouble(atts.getValue(0));					this.longitude = Double.parseDouble(atts.getValue(1));				}			break;			case "Bidder":				this.sbidRating = Double.parseDouble(atts.getValue(0));				this.bidID = atts.getValue(1);			break;			case "Seller":				this.selRating = Double.parseDouble(atts.getValue(0));				this.sellerID = atts.getValue(1);				createSellerCsv();			break;		}//Switch    }    public void endElement (String uri, String name, String qName)    {	if ("".equals (uri))	    System.out.println("End element: " + qName);	else	    System.out.println("End element:   {" + uri + "}" + name);    }    public void characters (char ch[], int start, int length)    {	System.out.print("Characters:    \"");	for (int i = start; i < start + length; i++) {	    switch (ch[i]) {	    case '\\':		System.out.print("\\\\");		break;	    case '"':		System.out.print("\\\"");		break;	    case '\n':		System.out.print("\\n");		break;	    case '\r':		System.out.print("\\r");		break;	    case '\t':		System.out.print("\\t");		break;	    default:		System.out.print(ch[i]);		break;	    }	}	System.out.print("\"\n");	//System.out.println(ch.toString());    }	public  void createSellerCsv()	{		BufferedWriter bw = null;		FileWriter fw = null;		try {			String content = this.sellerID + DEL + this.selRating + "\n";			fw = new FileWriter("Seller.csv", true);			bw = new BufferedWriter(fw);			PrintWriter out = new PrintWriter(bw);			File newfile = new File("Seller.csv");			if( newfile.length() == 0)			{				String header = "SellerID" + DEL + "rating" + "\n";				out.print(header);			}			out.print(content);		} catch (IOException e)		{			e.printStackTrace();		} finally		 {			try			{				if (bw != null)					bw.close();				if (fw != null)					fw.close();			} catch (IOException ex)			{				ex.printStackTrace();			}		}	}}