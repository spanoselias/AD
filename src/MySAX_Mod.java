/* Parser skeleton for processing item-???.xml files. Must be compiled in * JDK 1.5 or above. * * Instructions: * * This program processes all files passed on the command line (to parse * an entire diectory, type "java MyParser myFiles/*.xml" at the shell). * */import java.io.*;import java.text.*;import java.util.*;import org.xml.sax.XMLReader;import org.xml.sax.Attributes;import org.xml.sax.InputSource;import org.xml.sax.helpers.XMLReaderFactory;import org.xml.sax.helpers.DefaultHandler;public class MySAX_Mod extends DefaultHandler{	private String value="";	//	private int itemID=-1;	private double selRating=-1.0;	private String sellerID = "";	private double latitude = -1.0;	private double longitude=-1.0;	private boolean isCoord = false;	private double bidRating =-1.0;	private String bidID = "";	private  static final String DEL="Â¬";	private String itemName="";	private double firstBid=-1.0;	private double currently= -1.0;	private String started ="";	private String ends="";	private String descr ="";	private int noOfBids=0;	private boolean isOpen=false;	private int countrID=-1;	private int categoryID=0;	private int categoryCounter=0;	private String categoryName="";	private String countryName="";	private String locationName=""; //location of table Location	private int locIDCounter = 0; //For the locID	private String time="";	private double amount=0.0;	private double buyPrice = -1.0;	//Hashsets and Hashmaps for deduplication	private HashSet <String> sellers = new HashSet <String>();	private HashMap<String, Integer> categories = new HashMap<String, Integer>();    public static void main (String args[])	throws Exception    {		String cur_dir = System.getProperty("user.dir");		File folder = new File(cur_dir);		File[] listOfFiles = folder.listFiles();		for (int i = 0; i < listOfFiles.length; i++) {			if (listOfFiles[i].isFile()) {				//System.out.println("File " + listOfFiles[i].getName());				String tempFile = listOfFiles[i].getName();				File fileTemp = new File(tempFile);				String ext = tempFile.substring(tempFile.lastIndexOf(".") + 1);				if (ext.equals("csv")){					fileTemp.delete();				}			}		}	XMLReader xr = XMLReaderFactory.createXMLReader();	MySAX_Mod handler = new MySAX_Mod();	xr.setContentHandler(handler);	xr.setErrorHandler(handler);				// Parse each file provided on the				// command line.	for (int i = 0; i < args.length; i++) {	    FileReader r = new FileReader(args[i]);	    xr.parse(new InputSource(r));	}    }    public MySAX_Mod()    {	super();    }    /* Returns the amount (in XXXXX.xx format) denoted by a money-string     * like $3,453.23. Returns the input if the input is an empty string.     */    static String strip(String money) {        if (money.equals(""))            return money;        else {            double am = 0.0;            NumberFormat nf = NumberFormat.getCurrencyInstance(Locale.US);            try { am = nf.parse(money).doubleValue(); }            catch (ParseException e) {                System.out.println("This method should work for all " +                                   "money values you find in our data.");                System.exit(20);            }            nf.setGroupingUsed(false);            return nf.format(am).substring(1);        }    }    ////////////////////////////////////////////////////////////////////    // Event handlers.    ////////////////////////////////////////////////////////////////////    public void startDocument ()    {	System.out.println("Start document");    }    public void endDocument ()    {	System.out.println("End document");    }    public void startElement (String uri, String name,			      String qName, Attributes atts)    {	/*	if ("".equals (uri))	    System.out.println("Start element: " + qName);	else	    System.out.println("Start element: {" + uri + "}" + name);	for (int i = 0; i < atts.getLength(); i++) {	    System.out.println("Attribute: " + atts.getLocalName(i) + "=" + atts.getValue(i));	}*/		switch(name)		{			case "Item":				this.itemID = Integer.parseInt(atts.getValue(0));			break;			case "Location":				//We do not know for sure if there are both fields or				//non of them. So, we should check this case.				if (atts.getLength() == 2)				{					this.latitude = Double.parseDouble(atts.getValue(0));					this.longitude = Double.parseDouble(atts.getValue(1));					isCoord  =true;				}			break;			case "Bidder":				this.bidRating = Double.parseDouble(atts.getValue(0));				this.bidID = atts.getValue(1);			break;			case "Seller":				this.selRating = Double.parseDouble(atts.getValue(0));				this.sellerID = atts.getValue(1);				if ( !this.sellers.contains(this.sellerID) ){					this.sellers.add(this.sellerID);					createCsvs("Seller.csv");				}			break;		}//Switch    }    public void endElement (String uri, String name, String qName)    {		switch (name)		{			case "Location":				this.locationName = this.value;				//System.out.println(this.value);				//It is increased the counter each time when new location				//is found				this.locIDCounter +=1;				createCsvs("location.csv");				//It is check if there are coordinates, otherwise we do not				//want to create a table with null values				if(isCoord)				{					createCsvs("Location_Det.csv");					isCoord=false;				}				break;			case "Country":				this.countryName = this.value;				//It is increased the counter each time when a new country				//is found				this.countrID +=1;				createCsvs("Country.csv");			break;			case "Category":				this.categoryName = this.value;				//It is increased the counter each time when a new category				//is found				if ( !this.categories.containsKey(this.categoryName)){					this.categoryCounter +=1;					this.categoryID =this.categoryCounter;					this.categories.put(this.categoryName, this.categoryID);					createCsvs("Category.csv");					createCsvs("Item_Category.csv");				}else{					this.categoryID = this.categories.get(this.categoryName);					createCsvs("Item_Category.csv");				}			break;			case "Currently":				this.currently = Double.parseDouble(this.value.substring(1));			break;			case "Buy_Price":				this.buyPrice = Double.parseDouble(this.value.substring(1));			break;			case "First_Bid":				this.firstBid = Double.parseDouble(this.value.substring(1));			break;			case "Number_of_Bids":				this.noOfBids  = Integer.parseInt(this.value);			break;			case "Item":				this.itemID +=1;				if(buyPrice != -1.0)				{					createCsvs("Init_Price.csv");					buyPrice = -1.0;				}				createCsvs("Bidder.csv");			break;			case "Description":				this.descr = this.value;			break;			case "Ends":				this.ends = this.value;			break;			case "Started":				this.started = this.value;			break;			case "Amount":				//this.amount = Double.parseDouble(this.value);			break;			case "Time":				this.time = this.value;			break;		}		/*if ("".equals (uri))			System.out.println("End element: " + qName);		else			System.out.println("End element:   {" + uri + "}" + name);*/	}    public void characters (char ch[], int start, int length)    {		this.value = new String(ch,start, length);	/*System.out.print("Characters:    \"");	for (int i = start; i < start + length; i++) {	    switch (ch[i]) {	    case '\\':		System.out.print("\\\\");		break;	    case '"':		System.out.print("\\\"");		break;	    case '\n':		System.out.print("\\n");		break;	    case '\r':		System.out.print("\\r");		break;	    case '\t':		System.out.print("\\t");		break;	    default:		System.out.print(ch[i]);		break;	    }	}	System.out.print("\"\n");*/	//System.out.println(ch.toString());    }	public  void createCsvs(String nameCsv)	{		BufferedWriter bw = null;		FileWriter fw = null;		PrintWriter out;		String content = "";		try		{			switch (nameCsv)			{				case "Seller.csv":					content = this.sellerID + DEL + this.selRating + "\n";					fw = new FileWriter("Seller.csv", true);					bw = new BufferedWriter(fw);					out = new PrintWriter(bw);					File newfile = new File("Seller.csv");					if( newfile.length() == 0)					{						String header = "SellerID" + DEL + "rating" + "\n";						out.print(header);					}					out.print(content);				break;				case "location.csv":					content = this.locIDCounter + DEL + this.locationName + "\n";					fw = new FileWriter("location.csv", true);					bw = new BufferedWriter(fw);					out = new PrintWriter(bw);					newfile = new File("location.csv");					if( newfile.length() == 0)					{						String header = "locID" + DEL + "location" + "\n";						out.print(header);					}					out.print(content);				break;				case "Location_Det.csv":					content = this.locIDCounter + DEL + this.longitude  + DEL + this.latitude + "\n";					fw = new FileWriter("Location_Det.csv", true);					bw = new BufferedWriter(fw);					out = new PrintWriter(bw);					newfile = new File("Location_Det.csv");					if( newfile.length() == 0)					{						String header = "locID" + DEL + "Longitude" + DEL + "Latitude"  + "\n";						out.print(header);					}					out.print(content);				break;				case "Country.csv":					content = this.countrID + DEL + this.countryName + "\n";					fw = new FileWriter("Country.csv", true);					bw = new BufferedWriter(fw);					out = new PrintWriter(bw);					newfile = new File("Country.csv");					if( newfile.length() == 0)					{						String header = "countryID" + DEL + "name" + "\n";						out.print(header);					}					out.print(content);				break;				case "Category.csv":					content = this.categoryID + DEL + this.categoryName + "\n";					fw = new FileWriter("Category.csv", true);					bw = new BufferedWriter(fw);					out = new PrintWriter(bw);					newfile = new File("Category.csv");					if( newfile.length() == 0)					{						String header = "categoryID" + DEL + "name" + "\n";						out.print(header);					}					out.print(content);					break;				case "Init_Price.csv":					content = this.itemID + DEL + this.buyPrice + "\n";					fw = new FileWriter("Init_Price.csv", true);					bw = new BufferedWriter(fw);					out = new PrintWriter(bw);					newfile = new File("Init_Price.csv");					if( newfile.length() == 0)					{						String header = "itemID" + DEL + "buyPrice" + "\n";						out.print(header);					}					out.print(content);				break;				case "Item_Category.csv":					content = this.itemID + DEL + this.categoryID + "\n";					fw = new FileWriter("Item_Category.csv", true);					bw = new BufferedWriter(fw);					out = new PrintWriter(bw);					newfile = new File("Item_Category.csv");					if( newfile.length() == 0)					{						String header = "itemID" + DEL + "categoryID" + "\n";						out.print(header);					}					out.print(content);				break;				case "Bidder.csv":					content = this.bidID + DEL + this.bidRating + this.locIDCounter + "\n";					fw = new FileWriter("Bidder.csv", true);					bw = new BufferedWriter(fw);					out = new PrintWriter(bw);					newfile = new File("Bidder.csv");					if( newfile.length() == 0)					{						String header = "bidderID" + DEL + "rating" + DEL + "locID" + "\n";						out.print(header);					}					out.print(content);				break;				case "Bid_Act.csv":					content = this.itemID + DEL + this.bidID+ this.time + "\n";					fw = new FileWriter("Bid_Act.csv", true);					bw = new BufferedWriter(fw);					out = new PrintWriter(bw);					newfile = new File("Bid_Act.csv");					if( newfile.length() == 0)					{						String header = "itemID" + DEL + "bidderID" + DEL + "time" + DEL + amount + "\n";						out.print(header);					}					out.print(content);				break;				case "Bidder_Location.csv":					content = this.bidID + DEL + this.locIDCounter + "\n";					fw = new FileWriter("Bidder_Location.csv", true);					bw = new BufferedWriter(fw);					out = new PrintWriter(bw);					newfile = new File("Bidder_Location.csv");					if( newfile.length() == 0)					{						String header = "bidderID" + DEL + "locID" + "\n";						out.print(header);					}					out.print(content);				break;				case "Bidder_Country.csv":					content = this.bidID + DEL + this.locIDCounter + "\n";					fw = new FileWriter("Bidder_Country.csv", true);					bw = new BufferedWriter(fw);					out = new PrintWriter(bw);					newfile = new File("Bidder_Country.csv");					if( newfile.length() == 0)					{						String header = "bidderID" + DEL + "countryID" + "\n";						out.print(header);					}					out.print(content);				break;				case "Item.csv":					content = this.itemID + DEL + this.itemName + this.firstBid + this.currently + this.started + this.ends + this.descr + this.noOfBids + this.isOpen + this.sellerID + this.countrID  + this.locIDCounter +  "\n";					fw = new FileWriter("Item.csv", true);					bw = new BufferedWriter(fw);					out = new PrintWriter(bw);					newfile = new File("Item.csv");					if( newfile.length() == 0)					{						String header = "itemID" + DEL + "itemName" + "firstBid" + "currently" + "started" + "ends" + "descr" + "noOfBids" + "isOpen" + "selID" + "countryID" + "locID" + "\n";						out.print(header);					}					out.print(content);				break;			}		} catch (IOException e)		{			e.printStackTrace();		} finally		 {			try			{				if (bw != null)					bw.close();				if (fw != null)					fw.close();			} catch (IOException ex)			{				ex.printStackTrace();			}		}	}}